

#Config

AssociateDotSAC					=Ассоциировать .SAC файлы
AddIcon							=Добавить иконку для .SAC файлов
AddCreateNew					=Добавить кнопку "Создать>>Новый .SAC файл" в контекстное меню (ПКМ в папке)
AddConfLaunch					=Добавить кнопку "Запуск с параметрами" для .SAC файлов
AddEdit							=Добавить кнопку "Изменить" для .SAC файлов
Ok								=ОК
Apply							=Применить

Exec							=Выполнить
ConfLaunch						=Запуск с параметрами
Edit							=Изменить

Text|reg used					=Ключ реестра ".sac" используется программой "{0}".\#10Перезаписать?
Cap|reg used					=Ключ реестра ".sac" занят

Text|reg ver					=Установленная версия SAC ={0}, но версия Config.exe ={1}.\#10Понизить версию SAC?
Cap|reg ver						=Ошибка версий

Text|NeedRestart				=Теперь перезагрузите компьютер чтоб сохранить и применить ассоциацию .sac файлов, иконки и т.п.
Cap|NeedRestart					=Необходима перезагрузка компьютера

Text|SettingsDel				=Найден файл настроек, удалить его?
Cap|SettingsDel					=Удалить настройки?

Text|LibDel						=После удаления стандартного содержимого Lib, что то осталось. Возможно это ваши скрипты и возможно они вам ещё нужны.\#10Удалить всю папку "Lib"?
Cap|LibDel						=Папка Lib не пуста



#Parsing

abc=def



#SAC

NoLibHelp						=Папка Lib не найдена\#10Вы всё ещё можете запустить скрипт из любой другой папки\#10Запустите этот .exe с аргументами командной строки, вот так:\#10"*папка_этого_exe*\SAC.exe" "*ПутьКВашемуСкрипту*\*Название вашего скрипта*.sac"\#10Вы так же можете указать параметры, после имени .sac файла\#10Вот список допустимых параметров:\#10"!conf" - запустит программу которая поможет разобраться с параметрами\#10"!debug" - запустит скрипт в debug-режиме (медленнее, но больше информации об ошибках)\#10Пока что это всё, нажмите Enter для выхода
CanNotParseBoolArg				=Не получается преобразовать "{0}" в True или False
UnknownArg						=Неизвестный параметр: "{0}"

LibView|CurrLib					=Папка: "{0}"
LibView|RootLib					=Предыдущая папка: "{0}"
LibView|SubLibs					=Подпапки:
LibView|Scripts					=Скрипты:
LibView|LibElement				={0} : {1}
LibView|LibBack					=-1/back : Вернутся
LibView|Read					=Введите имя или номер:
LibView|AnsNotDef				=Неизвестное имя: "{0}"
LibView|InvalidId				=Номер №{0} вне допустимых границ

Running							=Выполняется
SetKey							=Уст. кнопку



#Help

%EnterName						=Введите имя оператор чтоб получить его описание, или пустую строку для списка операторов

H|Key							=Нажимает/отжимает кнопку на клавиатуре
T|Key							=Key 65 0\#10Ничего не сделает\#10\#10Key 65 1\#10Нажмёт латинскую "A" на клавиатуре, и оставит её нажатой\#10\#10Key 65 2\#10Отожмёт латинскую "A" на клавиатуре\#10\#10Key 65 3\#10Нажмёт и затем отожмёт латинскую "A" на клавиатуре\#10\#10Обратите внимание, последний операнд этого оператора смотрит только на последние 2 бита\#10Поэтому 10(0x1010) будет работать как 2(0x0010), и т.д.\#10\#10Вы можете узнать код кнопки, запустив WK.exe и нажав нужную кнопку
H|KeyD							=Нажимает кнопку на клавиатуре
T|KeyD							=KeyD 65\#10Нажмёт латинскую "A" на клавиатуре, и оставит её нажатой\#10\#10Вы можете узнать код кнопки, запустив WK.exe и нажав нужную кнопку
H|KeyU							=Отжимает кнопку на клавиатуре
T|KeyU							=KeyU 65\#10Отожмёт латинскую "A" на клавиатуре\#10\#10Вы можете узнать код кнопки, запустив WK.exe и нажав нужную кнопку
H|KeyP							=Нажимает и затем отжимает кнопку на клавиатуре
T|KeyP							=KeyP 65\#10Нажмёт и затем отожмёт латинскую "A" на клавиатуре\#10\#10Вы можете узнать код кнопки, запустив WK.exe и нажав нужную кнопку
%1=

H|Mouse							=Нажимает/отжимает кнопку мышки
T|Mouse							=Mouse 2 0\#10Ничего не сделает\#10\#10Mouse 2 1\#10Нажмёт ПКМ, и оставит её нажатой\#10\#10Mouse 2 2\#10Отожмёт ПКМ\#10\#10Mouse 2 3\#10Нажмёт и затем отожмёт ПКМ\#10\#10Обратите внимание, последний операнд этого оператора смотрит только на последние 2 бита\#10Поэтому 10(0x1010) будет работать как 2(0x0010), и т.д.\#10\#10Коды кнопок мыши:\#10 1: ЛКМ\#10 2: ПКМ\#10 4: СКМ\#10 5: Боковая кнопка1\#10 6: Боковая кнопка2
H|MouseD						=Нажимает кнопку мышки
T|MouseD						=MouseD 2\#10Нажмёт ПКМ, и оставит её нажатой\#10\#10Коды кнопок мыши:\#10 1: ЛКМ\#10 2: ПКМ\#10 4: СКМ\#10 5: Боковая кнопка1\#10 6: Боковая кнопка2
H|MouseU						=Отжимает кнопку мышки
T|MouseU						=MouseU 2\#10Отожмёт ПКМ\#10\#10Коды кнопок мыши:\#10 1: ЛКМ\#10 2: ПКМ\#10 4: СКМ\#10 5: Боковая кнопка1\#10 6: Боковая кнопка2
H|MouseP						=Нажимает и затем отжимает кнопку мышки
T|MouseP						=MouseP 2\#10Нажмёт и затем отожмёт ПКМ\#10\#10Коды кнопок мыши:\#10 1: ЛКМ\#10 2: ПКМ\#10 4: СКМ\#10 5: Боковая кнопка1\#10 6: Боковая кнопка2
%2=

H|MousePos						=Передвигает мышку к указанным координатам
T|MousePos						=MousePos 123 456\#10Передвинет мышку на координаты (123; 456), считая с левого верхнего угла
H|GetKey						=Узнаёт нажата ли кнопка
T|GetKey						=GetKey 65 KeyA\#10Запишет 1 (латинское "A" нажато) или 0 (латинское "A" отжато) в переменной "KeyA"\#10\#10Вы можете узнать код кнопки, запустив WK.exe и нажав нужную кнопку
H|GetKeyTrigger					=Узнаёт активирован ли триггер кнопки (как у CapsLock)
T|GetKeyTrigger					=GetKeyTrigger 20 CapsLockKey\#10Сохранит 1 (CapsLock включён) или 0 (CapsLock выключен) в переменной "CapsLockKey"\#10\#10Вы можете узнать код кнопки, запустив WK.exe и нажав нужную кнопку
H|GetMousePos					=Получает позицию курсора
T|GetMousePos					=GetMousePos MouseX MouseY\#10Запишет позицию курсора в "MouseX" и "MouseY", считая с левого верхнего угла
%3=

H|Jump							=Переставляет точку выполнения к указаной метке
T|Jump							=Jump "#lable1"\#10Найдет метку "lable1" в данном файле и продолжит выполнение с неё\#10\#10Jump "file1.sac"\#10Найдёт файл "file1.sac" и выполнит его, вместо текущего\#10\#10Jump "file2.sac#lable2"\#10Найдёт метку "lable2" в файле "file2.sac" и продолжит выполнение с неё\#10\#10Jump null\#10Сработает как Return, потому что это прыжок в никуда\#10(В основном используется в JumpIf)
H|JumpIf						=Переставляет точку выполнения к 1 из 2 указаных меток
T|JumpIf						=JumpIf n < 5 #lable1 null\#10Если n меньше чем 5 - будет выполнено Jump "#lable1"\#10Иначе будет выполнено Jump null\#10\#10В качестве операторов сравнения можно использовать только ">", "<" или "="
%4=

H|Call							=Переставляет точку выполнения к указаной метке, сохраняя текущую позицию
T|Call							=Call exec_point_name\#10Работает так же как Jump, но сохраняет текущую позицию\#10Когда будет выполнен Return или достигнут конец файла - будет загружена последняя сохранённая позиция\#10Вы можете сохранять несколько позиций друг за другому,\#10это позволяет делать рекурсивные алгоритмы\#10\#10Call null\#10Будет проигнорировано, потому что оно сохраняет позицию и сразу загружает её назад\#10(Jump null работает как Return)
H|CallIf						=Переставляет точку выполнения к 1 из 2 указаных меток, сохраняя текущую позицию
T|CallIf						=CallIf n < 5 #lable1 null\#10Если n меньше чем 5 - будет выполнено Call "#lable1"\#10Иначе будет выполнено Call null\#10\#10В качестве операторов сравнения можно использовать только ">", "<" или "="
%5=

H|Susp							=Приостанавливает выполнение и ожидает нажатия кнопки(-ок) возобновления
T|Susp							=Susp\#10Приостановит выполнение и будет ждать нажатия кнопки(-ок) возобновления\#10Вы можете выбрать кнопки возобновления, нажав "Уст. кнопку" когда скрипт загружен
H|Return						=Работает как конец файла
T|Return						=Return\#10Вернёться к последнему вызову оператора Call/CallIf\#10Если их не было - выполнит Halt\#10\#10То же самое происходит в конце файла
H|Halt							=Останавливает скрипт
T|Halt							=Halt\#10Вызовет немедленное завершение работы SAC.exe
%6=

H|Sleep							=Ждёт указанное кол-во миллисекунд
T|Sleep							=Sleep 500\#10Подождёт пол секунды, перед тем как продолжить выполняться
H|Random						=Генерирует псевдо-случайное число
T|Random						=Random r\#10Сгенерирует псевдо-случайное число в диапазоне [0,1) и сохранит в переменной "r"
H|Output						=Выписывает значение в вывод
T|Output						=Output 5+3\#10Выпишет "8" в стандартный вывод

