

%EnterName=\
	Enter operator name for it's description\
	Enter empty string for list of operators

H|Key							=Presses/unpresses keyboard button
T|Key							=\
	Key 65 0\
	Will do nothing\
	\
	Key 65 1\
	Will press "A" on keyboard, and will left it pressed\
	\
	Key 65 2\
	Will unpress "A" on keyboard\
	\
	Key 65 3\
	Will press and then unpress "A" on keyboard\
	\
	Note, last operand of this operator looks only on last 2 bits\
	So 10(0x1010) would work like 2(0x0010), etc.\
	\
	You can find out key code by running WK.exe and pressing that key

H|KeyD							=Presses keyboard button
T|KeyD							=\
	KeyD 65\
	Will press "A" on keyboard, and will left it pressed\
	\
	You can find out key code by running WK.exe and pressing that key

H|KeyU							=Unpresses keyboard button
T|KeyU							=\
	KeyU 65\
	Will unpress "A" on keyboard\
	\
	You can find out key code by running WK.exe and pressing that key

H|KeyP							=Presses and then unpresses keyboard button
T|KeyP							=\
	KeyP 65\
	Will press and then unpress "A" on keyboard\
	\
	You can find out key code by running WK.exe and pressing that key

%1=





H|Mouse							=Presses/unpresses mouse button
T|Mouse							=\
	Mouse 2 0\
	Will do nothing\
	\
	Mouse 2 1\
	Will press RMB, and will left it pressed\
	\
	Mouse 2 2\
	Will unpress RMB\
	\
	Mouse 2 3\
	Will press and unpress RMB\
	\
	Note, last operand of this operator looks only on last 2 bits\
	So 10(0x1010) would work like 2(0x0010), etc.\
	\
	Valid MB codes:\
	1: LMB\
	2: RMB\
	4: MMB\
	5: SideMB1\
	6: SideMB2

H|MouseD						=Presses mouse button
T|MouseD						=\
	MouseD 2\
	Will press RMB, and will left it pressed\
	\
	Valid MB codes:\
	1: LMB\
	2: RMB\
	4: MMB\
	5: SideMB1\
	6: SideMB2

H|MouseU						=Unpresses mouse button
T|MouseU						=\
	MouseU 2\
	Will unpress RMB\
	\
	Valid MB codes:\
	1: LMB\
	2: RMB\
	4: MMB\
	5: SideMB1\
	6: SideMB2

H|MouseP						=Presses and then unpresses mouse button
T|MouseP						=\
	MouseP 2\
	Will press and unpress RMB\
	\
	Valid MB codes:\
	1: LMB\
	2: RMB\
	4: MMB\
	5: SideMB1\
	6: SideMB2

%2=





H|MousePos						=Moves mouse to specified coords
T|MousePos						=\
	MousePos 123 456\
	Will Move mouse to coordinates (123; 456), counting from top left corner

H|GetKey						=Finds out if key is pressed
T|GetKey						=\
	GetKey 65 KeyA\
	Will store 1 ("A" pressed) or 0 ("A" unpressed) in variable "KeyA"\
	\
	This also works for mouse keys\
	\
	You can find out key code by running WK.exe and pressing that key

H|GetKeyTrigger					=Finds out if key is triggered (like CapsLock)
T|GetKeyTrigger					=\
	GetKeyTrigger 20 CapsLockKey\
	Will store 1 (CapsLock on) or 0 (CapsLock off) in variable "CapsLockKey"\
	\
	You can find out key code by running WK.exe and pressing that key

H|GetMousePos					=Reads cursor position
T|GetMousePos					=\
	GetMousePos MouseX MouseY\
	Will store cursor position in variables "MouseX" and "MouseY",\
	counting from top left corner

%3=





H|Jump							=Transfers control to target label
T|Jump							=\
	Jump "#label1"\
	Will find label "label1" in current file and continue execution from it\
	\
	Jump "file1.sac"\
	Will find file "file1.sac" and execute it, instead of current file\
	\
	Jump "file2.sac#label2"\
	Will find label "label2" in "file2.sac" file and execute it\
	\
	Jump null\
	Will work like Return, because it's a jump to nowhere\
	(Mostly used in JumpIf)

H|JumpIf						=Transfers control to 1 of 2 target labels
T|JumpIf						=\
	JumpIf n < 5 #label1 null\
	If n is less then 5 - will perform Jump "#label1"\
	Otherwise will perform Jump null\
	\
	You can only use ">", "<" or "=" as comparers

%4=





H|Call							=Transfers control to target label, saving current position
T|Call							=\
	Call exec_point_name\
	Works like Jump, but saves current execution position\
	When end of file or Return found - last execution position will be loaded\
	You can save a lot of positions on top of each other,\
	this allows for recursion\
	\
	Call null\
	Will be ignored, because it saves exec.pos. and immediately loads back\
	(Jump null works like Return)

H|CallIf						=Transfers control to 1 of 2 target labels, saving current position
T|CallIf						=\
	CallIf n < 5 #label1 null\
	If n is less then 5 - will perform Call "#label1"\
	Otherwise will perform Call null\
	\
	You can only use ">", "<" or "=" as comparers

%5=





H|Susp							=Suspends execution and waits for resume key(s)
T|Susp							=\
	Susp\
	Will suspend execution and wait for resume key(s)\
	You can specify resume key(s) by pressing "Set key" when script is loaded

H|Return						=Works as end of file
T|Return						=\
	Return\
	Will return to last call to Call/CallIf operator\
	If there wasn't any - will perform Halt operator\
	\
	The same happens on the end of the file 

H|Halt							=Shuts down script
T|Halt							=\
	Halt\
	Will immediately stop script execution

%6=





H|Sleep							=Waits specified number of milliseconds
T|Sleep							=\
	Sleep 500\
	Will do nothing for half a second

H|Random						=Generates pseudo-random number
T|Random						=\
	Random r\
	Will generate pseudo-random number in range [0,1) and store in variable "r"

H|Output						=Writes value to output
T|Output						=\
	Output 5+3\
	Will write "8" to output


