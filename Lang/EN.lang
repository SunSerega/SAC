

#Config

AssociateDotSAC					=Associate .SAC files
AddIcon							=Add icon to .SAC files
AddCreateNew					=Add "Create>>new .SAC file" button for context menu (RMB in folder)
AddConfLaunch					=Add "Configured Launch" button for .SAC files
AddEdit							=Add "Edit" button for .SAC files
Ok								=OK
Apply							=Apply

Exec							=Execute
ConfLaunch						=Configured Launch
Edit							=Edit

Text|reg used					=Registry key ".sac" used by "{0}".\#10Replace it?
Cap|reg used					=Registry key ".sac" is used

Text|reg ver					=Current version is {0}, but Config.exe version is {1}.\#10Do you want to downgrade current version?
Cap|reg ver						=Version error

Text|NeedRestart				=Now restart computer to save and apply .sac file association, icons, etc.
Cap|NeedRestart					=Computer restart needed

Text|SettingsDel				=Settings file found, delete it?
Cap|SettingsDel					=Delete settings?

Text|LibDel						=After deleting standard Lib entries, somethings left. Maybe it's your script and maybe you still need them.\#10Delete whole "Lib" folder?
Cap|LibDel						=Lib not empty



#Parsing

abc=def



#SAC

NoLibHelp						=No lib folder found\#10You can still start script from any other folder\#10Start this .exe with Command line arguments, like this:\#10"*folder_of_this_exe*\SAC.exe" "*YourScriptPath*\*YourScriptName*.sac"\#10You can also specify arguments, after .sac file name\#10Here is list of them:\#10"!conf" - will start program to help add arguments\#10"!debug" - will start script with debug (slower, but more info)\#10Thats all for now, press Enter to exit
CanNotParseBoolArg				=Can't parse "{0}" to bool value
UnknownArg						=Unknown arg: "{0}"

LibView|CurrLib					=Folder: "{0}"
LibView|RootLib					=Root: "{0}"
LibView|SubLibs					=SubLibs:
LibView|Scripts					=Scripts:
LibView|LibElement				={0} : {1}
LibView|LibBack					=-1/back : Go to root
LibView|Read					=Enter name or id:
LibView|AnsNotDef				="{0}" is not defined
LibView|InvalidId				=id #{0} is out of possible range

Running							=Running
SetKey							=Set key



#Help

%EnterName						=Enter operator name for it's description or empty string for list of operators

H|Key							=Presses/unpresses keyboard button
T|Key							=Key 65 0\#10Will do nothing\#10\#10Key 65 1\#10Will press "A" on keyboard, and will left it pressed\#10\#10Key 65 2\#10Will unpress "A" on keyboard\#10\#10Key 65 3\#10Will press and then unpress "A" on keyboard\#10\#10Note, last operand of this operator looks only on last 2 bits\#10So 10(0x1010) would work like 2(0x0010), etc.\#10\#10You can find out key code by running WK.exe and pressing that key
H|KeyD							=Presses keyboard button
T|KeyD							=KeyD 65\#10Will press "A" on keyboard, and will left it pressed\#10\#10You can find out key code by running WK.exe and pressing that key
H|KeyU							=Unpresses keyboard button
T|KeyU							=KeyU 65\#10Will unpress "A" on keyboard\#10\#10You can find out key code by running WK.exe and pressing that key
H|KeyP							=Presses and then unpresses keyboard button
T|KeyP							=KeyP 65\#10Will press and then unpress "A" on keyboard\#10\#10You can find out key code by running WK.exe and pressing that key
%1=

H|Mouse							=Presses/unpresses mouse button
T|Mouse							=Mouse 2 0\#10Will do nothing\#10\#10Mouse 2 1\#10Will press RMB, and will left it pressed\#10\#10Mouse 2 2\#10Will unpress RMB\#10\#10Mouse 2 3\#10Will press and unpress RMB\#10\#10Note, last operand of this operator looks only on last 2 bits\#10So 10(0x1010) would work like 2(0x0010), etc.\#10\#10Valid MB codes:\#10 1: LMB\#10 2: RMB\#10 4: MMB\#10 5: SideMB1\#10 6: SideMB2
H|MouseD						=Presses mouse button
T|MouseD						=MouseD 2\#10Will press RMB, and will left it pressed\#10\#10Valid MB codes:\#10 1: LMB\#10 2: RMB\#10 4: MMB\#10 5: SideMB1\#10 6: SideMB2
H|MouseU						=Unpresses mouse button
T|MouseU						=MouseU 2\#10Will unpress RMB\#10\#10Valid MB codes:\#10 1: LMB\#10 2: RMB\#10 4: MMB\#10 5: SideMB1\#10 6: SideMB2
H|MouseP						=Presses and then unpresses mouse button
T|MouseP						=MouseP 2\#10Will press and unpress RMB\#10\#10Valid MB codes:\#10 1: LMB\#10 2: RMB\#10 4: MMB\#10 5: SideMB1\#10 6: SideMB2
%2=

H|MousePos						=Moves mouse to specified coords
T|MousePos						=MousePos 123 456\#10Will Move mouse to coordinates (123; 456), counting from top left corner
H|GetKey						=Finds out if key is pressed
T|GetKey						=GetKey 65 KeyA\#10Will store 1 ("A" pressed) or 0 ("A" unpressed) in variable "KeyA"\#10\#10This also works for mouse keys\#10\#10You can find out key code by running WK.exe and pressing that key
H|GetKeyTrigger					=Finds out if key is triggered (like CapsLock)
T|GetKeyTrigger					=GetKeyTrigger 20 CapsLockKey\#10Will store 1 (CapsLock on) or 0 (CapsLock off) in variable "CapsLockKey"\#10\#10You can find out key code by running WK.exe and pressing that key
H|GetMousePos					=Reads cursor position
T|GetMousePos					=GetMousePos MouseX MouseY\#10Will store cursor position in variables "MouseX" and "MouseY",\#10counting from top left corner
%3=

H|Jump							=Transfers control to target label
T|Jump							=Jump "#label1"\#10Will find label "label1" in current file and continue execution from it\#10\#10Jump "file1.sac"\#10Will find file "file1.sac" and execute it, instead of current file\#10\#10Jump "file2.sac#label2"\#10Will find label "label2" in "file2.sac" file and execute it\#10\#10Jump null\#10Will work like Return, because it's a jump to nowhere\#10(Mostly used in JumpIf)
H|JumpIf						=Transfers control to 1 of 2 target labels
T|JumpIf						=JumpIf n < 5 #label1 null\#10If n is less then 5 - will perform Jump "#label1"\#10Otherwise will perform Jump null\#10\#10You can only use ">", "<" or "=" as comparers
%4=

H|Call							=Transfers control to target label, saving current position
T|Call							=Call exec_point_name\#10Works like Jump, but saves current execution position\#10When end of file or Return found - last execution position will be loaded\#10You can save a lot of positions on top of each other,\#10this allows for recursion\#10\#10Call null\#10Will be ignored, because it saves exec.pos. and immediately loads back\#10(Jump null works like Return)
H|CallIf						=Transfers control to 1 of 2 target labels, saving current position
T|CallIf						=CallIf n < 5 #label1 null\#10If n is less then 5 - will perform Call "#label1"\#10Otherwise will perform Call null\#10\#10You can only use ">", "<" or "=" as comparers
%5=

H|Susp							=Suspends execution and waits for resume key(s)
T|Susp							=Susp\#10Will suspend execution and wait for resume key(s)\#10You can specify resume key(s) by pressing "Set key" when script is loaded
H|Return						=Works as end of file
T|Return						=Return\#10Will return to last call to Call/CallIf operator\#10If there wasn't any - will perform Halt operator\#10\#10The same happens on the end of the file 
H|Halt							=Shuts down script
T|Halt							=Halt\#10Will immediately stop script execution
%6=

H|Sleep							=Waits specified number of milliseconds
T|Sleep							=Sleep 500\#10Will do nothing for half a second
H|Random						=Generates pseudo-random number
T|Random						=Random r\#10Will generate pseudo-random number in range [0,1) and store in variable "r"
H|Output						=Writes value to output
T|Output						=Output 5+3\#10Will write "8" to output

