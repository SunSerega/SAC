

%EnterName=\
	\
	\
	\
	\
	\
	Введите имя директивы, чтоб получить её описание\
	Введите пустую строку для списка директив\
	> 



H|FRef							=Загружает файл, даже если он не будет использован в скрипте
T|FRef							=\
	!Fref "f1.sac"\
	Добавить весь код из файла "f1.sac" в загруженный скрипт\
	\
	!Fref "f1.sac" "f2.sac"\
	Добавить весь код из все указанные файлы\
	\
	Эта директива имеет неограниченное кол-во операндов, поэтому к ней нельзя добавить комментарии


H|StartPos						=Указывает что блок строк может быть стартовой позицией скрипта
T|StartPos						=\
	!StartPos\
	Укажет что блок строк, в котором находится эта директива, является подходящим для старта скрипта с него\
	\
	!StartPos может стоять только в начале блока\
	(в начале файла или сразу после метки)\
	\
	Если в скрипте нет ни 1 директивы !StartPos - каждый блок может быть стартовой позицией\
	\
	Кроме защиты от дурака, !StartPos так же помогает компилятору произвести больше оптимизаций


H|SngDef						=Определяет некоторые свойства переменной
T|SngDef						=\
	!SngDef n1=Num             (n1 определена как Num, теперь ей нельзя присвоить значение типа Str)\
	!SngDef n2=Num:ReadOnly    (n2 может быть изменена только в файле, содержащем эту директиву)\
	!SngDef n3=Num:Const=1.23  (n3 установлено значение, которое нельзя будет далее изменить)\
	\
	!SngDef s1=Str             (s1 определена как Str, теперь ей нельзя присвоить значение типа Num)\
	!SngDef s2=Str:ReadOnly    (s2 может быть изменена только в файле, содержащем эту директиву)\
	!SngDef s3=Str:Const="abc" (s3 установлено значение, которое нельзя будет далее изменить)\
	\
	ReadOnly переменная может использоваться как возвращаемое значение .sac файла\
	Потому что её значение можно будет изменить только в файле, в котором её объявили\
	А остальные файлы смогут только читать её значение\
	Правда, несколько файлов могут иметь общую ReadOnly, главно чтоб тип был объявлен одинаковый\
	\
	Вы так же можете использовать выражения в константах:\
	\
	!SngDef Pi=Num:Const=3.14\
	!SngDef 2Pi=Num:Const=Pi*2\
	\
	Во время оптимизации, вхождения всех констант будут заменены их значениями\
	\
	Кроме защиты от дурака, !SngDef так же помогает компилятору произвести больше оптимизаций
